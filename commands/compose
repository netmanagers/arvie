#!/usr/bin/env bash

set -euo pipefail

COMMAND=$(basename $0)

usage() {
  echo >&2
  echo >&2 "Passes the arguments it receives verbatim to 'docker-compose'"
  echo >&2
  echo >&2 "Usage: arvie <CLUSTER> ${COMMAND} [-h|--help] [arguments to docker compose]" 
  echo >&2
  echo >&2 "  <CLUSTER> the cluster on which [${COMMAND}] will be applied"
  echo >&2
  echo >&2 "${COMMAND} options:"
  echo >&2 "  -h, --help            Display this help and exit"
  echo >&2 "  -t, --tag <TAG>       Image <TAG> to use/invoke. Defaults to 'latest'"
  echo >&2 "  [argumentsN]          The resto of the line will be passed verbatim to docker-compose"
  echo >&2
}

arguments() {
  # NOTE: This requires GNU getopt (part of the util-linux package on Debian-based distros).
  TEMP=`getopt -o ht: \
    --long help,tag: \
    -n "$0" -- "$@"`

  if [ $? != 0 ] ; then usage; exit 1 ; fi

  # Note the quotes around '$TEMP': they are essential!
  eval set -- "$TEMP"

  while [ $# -ge 1 ]; do
    case $1 in
      -t | --tag)
        TAG=${2}
        shift 2
        ;;
      --)
        shift
        break
        ;;
      -h | --help)
        usage
        exit 0
        ;;
    esac
  done

  CLUSTER=${1}
  shift
  COMMAND_LINE=$@
}

TAG="latest"
COMMAND_LINE=""

arguments $@

# Check if the cluster already exists
if [ ! -d ${CLUSTER} ]; then
  echo >&2 "ERROR: cluster ${CLUSTER} does not yet exist."
  echo >&2
  echo >&2 "       Please, create the cluster environment first, with the command"
  echo >&2
  echo >&2 "       arvie <CLUSTER> env"
  exit 1
fi

# We use the docker-compose's .env file to configure arvie
source ${CLUSTER}/${CLUSTER}.env

echo "Running docker-compose"
BUILD_TAG=${TAG} docker-compose \
  --file ${CLUSTER}/base.yml \
  --log-level DEBUG ${COMMAND_LINE}
