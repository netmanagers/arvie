#!/usr/bin/env bash

set -euo pipefail

COMMAND=$(basename $0)

usage() {
  echo >&2
  echo >&2 "Prepares and manages Arvie environments to run clusters"
  echo >&2
  echo >&2 "Usage: arvie <CLUSTER> ${COMMAND} [-h|--help]" 
  echo >&2
  echo >&2 "  <CLUSTER> the cluster on which [${COMMAND}] will be applied"
  echo >&2
  echo >&2 "           -h, --help            Display this help and exit"
  echo >&2
  echo >&2 "       arvie <CLUSTER> ${COMMAND} create [-t|--template TEMPLATE] [-v|--var VAR1=value] [-v|--var VAR2=value2] [-v|--var VARN=valueN] [DOMAIN]" 
  echo >&2
  echo >&2 "         create options:"
  echo >&2 "           -t, --template        One of the templates from the 'scaffold' dir"
  echo >&2 "                                 which will be used to create the new cluster config"
  echo >&2 "                                 Defaults to 'template1'"
  echo >&2 "           -v, --var VAR=value   KEY=value pairs to use in a sed replacement over the selected template"
  echo >&2 "           <CLUSTER>             A unique 5 letters word to use as the Arvados' cluster name"
  echo >&2 "           <DOMAIN>              The domain you want to use for your cluster. Defaults to arv.local"
  echo >&2
}

arguments() {
  # NOTE: This requires GNU getopt (part of the util-linux package on Debian-based distros).
  TEMP=`getopt -o ht:v: \
    --long help,template:,var: \
    -n "$0" -- "$@"`

  if [ $? != 0 ] ; then usage; exit 1 ; fi

  # Note the quotes around '$TEMP': they are essential!
  eval set -- "$TEMP"

  while [ $# -ge 1 ]; do
    case $1 in
      -t | --template)
        TEMPLATE=${2}
        shift 2
        ;;
      -v | --var)
        # process the vars to do the replacements in the templates
        [ "x${SED}" != "x" ] && SED="${SED};"
        SN=$(echo ${2} | cut -f 1 -d "=")
        SV=$(echo ${2} | cut -f 2 -d "=")
        SED="${SED} s/__${SN}__/${SV}/g"
        shift 2
        ;;
      --)
        shift
        break
        ;;
      -h | --help)
        usage
        exit 0
        ;;
    esac
  done

  COMMAND_LINE=$@
}

set_required_params() {
  REQ_PARAMS_NO=$(echo ${@} |wc  -w)

  if [ ${REQ_PARAMS_NO} -lt 1 ] ; then
    echo "ERROR: You must provide at least a <CLUSTER> name"
    usage
    exit 1
  fi

  if [ ${#1} -ne 5 ]; then
    echo "ERROR: <CLUSTER> must be exactly 5 characters long"
    usage
    exit 1
  fi
  CLUSTER=${1}
  if [ "x${2}" != "x" ]; then
    DOMAIN=${2}
  fi
}

# Set some defaults
SED=""
TEMPLATE="template1"
COMMAND_LINE=""
DOMAIN="arv.local"

arguments $@
set_required_params ${COMMAND_LINE}

# Check if the cluster already exists
if [ ! -d ${CLUSTER} ]; then
  echo >&2 "ERROR: cluster ${CLUSTER} does not yet exist."
  echo >&2
  echo >&2 "       Please, create the cluster environment first, with the command"
  echo >&2
  echo >&2 "       arvie <CLUSTER> env"
  exit 1
fi

# Add the final replacement strings
[ "x${SED}" != "x" ] && SED="${SED};"
SED="${SED} s/__CLUSTER__/${CLUSTER}/g; s/__DOMAIN__/${DOMAIN}/g"
echo "SED LINE: $SED"

# Do the job
echo "Cloning template ${TEMPLATE} to ${CLUSTER}"
cp -r scaffold/${TEMPLATE} ${CLUSTER}

echo "Replacing vars in ${CLUSTER}"
find ${CLUSTER} -type f -exec sed -i "${SED}" {} \;
mv -vi ${CLUSTER}/__CLUSTER__.env ${CLUSTER}/${CLUSTER}.env
