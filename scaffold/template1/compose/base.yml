---
# This is the base docker-compose.yml file, common to all the other ones.
# Is the one that will be used when invoking 'arvie up'

version: '3.8'

# VOLUMES ANCHORS TO DRY THE CONFIG
x-volumes-arvados-config: &volumes-arvados-config
  ${HOST_CONF_ARVADOS}/arvados-config.yml:/etc/arvados/config.yml
x-volumes-arvados-src: &volumes-arvados-src
  ${ARVADOS_ROOT}:/usr/src/arvados
x-volumes-cache-gem: &volumes-cache-gem
  ${HOST_GEMCACHE}:/cache/gem
x-volumes-cache-npm: &volumes-cache-npm
  ${HOST_NPMCACHE}:/cache/npm
x-volumes-cache-pip: &volumes-cache-pip
  ${HOST_PIPCACHE}:/cache.pip
x-volumes-flags: &volumes-flags
  ${ARVBOX_FLAGS}:/arvados/flags
x-volumes-scripts: &volumes-scripts
  ${HOST_SCRIPTS_DIR}:/scripts
x-volumes-docker-sock: &volumes-docker-sock
  /var/run/docker.sock:/var/run/docker.sock
x-volumes-docker-bin: &volumes-docker-bin
  /usr/bin/docker:/usr/bin/docker

# SERVICES
services:

  ### DATABASE
  database:
    container_name: database
    image: 'postgres:11-alpine'
    restart: always
    ports:
      - '5432:5432'
    volumes:
      - ${PG_DATA}:/var/lib/postgresql/data
      - ${HOST_SCRIPTS_DIR}/postgresql:/docker-entrypoint-initdb.d
      - ${HOST_CONF_DIR}/ssl/database.${CLUSTER}.${DOMAIN}.crt:/var/lib/postgresql/server.crt:ro
      - ${HOST_CONF_DIR}/ssl/database.${CLUSTER}.${DOMAIN}.key:/var/lib/postgresql/server.key:ro
    # yamllint disable-line rule:line-length
    command: postgres -c ssl=on -c ssl_cert_file=/var/lib/postgresql/server.crt -c ssl_key_file=/var/lib/postgresql/server.key -c log_statement=all
    # yamllint enable-line rule:line-length
    environment:
      POSTGRES_PASSWORD: ${PG_ADMIN_PASSWORD}

  ### CONTROLLER
  controller:
    container_name: controller
    image: nmarvie/controller:${BUILD_TAG}
    command: controller
    # ports:
    #   - 8000:8003
    restart: always
    volumes:
      - *volumes-arvados-config
    depends_on:
      - database

  ### WEBSOCKETS
  websocket:
    container_name: websocket
    image: nmarvie/websocket:${BUILD_TAG}
    command: ws
    # ports:
    #   - 8002:8005
    restart: always
    volumes:
      - *volumes-arvados-config
    depends_on:
      - api
      - controller

  ### API
  api:
    container_name: api
    image: nmarvie/api:${BUILD_TAG}
    command: /scripts/ruby/app_start 8004
    tty: true   # Enables debugging capabilities when attached to this container.
    # ports:
    #   - 8004:8004
    restart: always
    volumes:
      - *volumes-arvados-config
      - ${HOST_CONF_ARVADOS}/arvados-api-database.yml:/etc/arvados/database.yml
      - *volumes-cache-gem
      - *volumes-cache-npm
      - *volumes-arvados-src
      - *volumes-flags
      - *volumes-scripts
    environment:
      NPM_CONFIG_PREFIX: /cache/npm
      npm_config_cache_min: ${NPM_CACHE_MIN}
    depends_on:
      - database
      - controller
  nginx:
    container_name: nginx
    networks:
      default:
        aliases:
          - ${CLUSTER}.${DOMAIN}
          - workbench.${CLUSTER}.${DOMAIN}
          - workbench2.${CLUSTER}.${DOMAIN}
          - collections.${CLUSTER}.${DOMAIN}
          - download.${CLUSTER}.${DOMAIN}
          - keep.${CLUSTER}.${DOMAIN}
          - webshell.${CLUSTER}.${DOMAIN}
          - ws.${CLUSTER}.${DOMAIN}
    image: nginx:stable-alpine
    restart: always
    ports:
      # Unused. Default
      # - "8080:80"
      # Controller
      - "8000:8000"
      # Websocket
      - "8002:8002"
      # Workbench
      - "8443:8443"
      # Keepweb
      - "9002:9002"
      # Keepproxy
      - "25101:25101"
    volumes:
      - ${HOST_CONF_NGINX}:/etc/nginx/conf.d
      - ${HOST_CONF_DIR}/ssl:/etc/nginx/ssl:ro
    depends_on:
      - controller
      - api
      - workbench
      - keepproxy

  ### WORKBENCH
  workbench:
    container_name: workbench
    image: nmarvie/workbench:${BUILD_TAG}
    command: /scripts/ruby/app_start 8002
    tty: true   # Enables debugging capabilities when attached to this container.
    # ports:
    #   - 8443:8443
    restart: always
    volumes:
      - *volumes-arvados-config
      - ${HOST_CONF_ARVADOS}/arvados-workbench-application.yml:/etc/arvados/application.yml
      # FIXME! This needs to be really used
      - *volumes-cache-gem
      - *volumes-cache-pip
      - *volumes-cache-npm
      - *volumes-arvados-src
      - *volumes-flags
      - *volumes-scripts
    environment:
      npm_config_cache: /cache/npm
      npm_config_cache_min: ${NPM_CACHE_MIN}
    depends_on:
      - controller
      - api

  ### GIT-HTTPD
  # git-httpd:
  #   container_name: git-httpd
  #   image: nmarvie/git-httpd:${BUILD_TAG}
  #   ports:
  #     - 9001:9001
  #   volumes:
  #     - *volumes-arvados-config
  crunch-dispatch-local:
    container_name: dispatcher
    # https://stackoverflow.com/questions/27879713/is-it-ok-to-run-docker-from-inside-docker
    # TL;DR: no, it's not. you better run siblings
    image: nmarvie/crunch-dispatch-local:${BUILD_TAG}
    # command: '-poll-interval=1 -crunch-run-command=/usr/local/bin/crunch-run'
    command: '-poll-interval=1'
    environment:
      ARVADOS_HOST: api
      ARVADOS_API_TOKEN: system_root_token
      ARVADOS_API_HOST_INSECURE: 1
    tty: true   # Enables debugging capabilities when attached to this container.
    volumes:
      - *volumes-arvados-config
      - *volumes-docker-sock
      - *volumes-docker-bin
  # FIXME! If we want to use the slurm dispatcher
  # compute0:
  #   container_name: compute
  #   image: nmarvie/compute:${BUILD_TAG}
  #   tty: true   # Enables debugging capabilities when attached to this container.
  #   volumes:
  #     - *volumes-docker-sock
  #     - *volumes-docker-bin
  # health:
  #   container_name: health
  #   image: nmarvie/health:${BUILD_TAG}
  #   volumes:
  #     - *volumes-arvados-config
  # keep-balance:
  #   container_name: keep-balance
  #   image: nmarvie/keep-balance:${BUILD_TAG}
  #   volumes:
  #     - *volumes-arvados-config

  ### KEEPPROXY (KEEP)
  keepproxy:
    container_name: keep
    image: nmarvie/keepproxy:${BUILD_TAG}
    # ports:
    #   - 25101:25100
    volumes:
      - *volumes-arvados-config
    depends_on:
      - controller
      - api
      - keep0
      - keep1
  keepweb:
    container_name: keepweb
    image: nmarvie/keep-web:${BUILD_TAG}
    # ports:
    #   - 9002:9003
    volumes:
      - *volumes-arvados-config
    depends_on:
      - controller
      - api

  ### KEEPSTORE 0
  keep0:
    container_name: keep0
    image: nmarvie/keepstore:${BUILD_TAG}
    # ports:
    #   - 25107:25107
    volumes:
      - *volumes-arvados-config
      - ${KEEP0_DATA}:/var/lib/arvados/keep0

  ### KEEPSTORE 1
  keep1:
    container_name: keep1
    image: nmarvie/keepstore:${BUILD_TAG}
    # ports:
    #   - 25108:25108
    volumes:
      - *volumes-arvados-config
      - ${KEEP1_DATA}:/var/lib/arvados/keep1

  ### SHELL
  shell:
    container_name: shell
    image: nmarvie/shell:${BUILD_TAG}
    tty: true   # Enables debugging capabilities when attached to this container.
    # ports:
    #   - 2222:22
    volumes:
      - *volumes-arvados-src
      - *volumes-cache-gem
      - *volumes-cache-npm
      # FIXME! arvados-cwl-runner (and perhaps other tools need docker?)
      - *volumes-docker-sock
      - *volumes-docker-bin
    environment:
      NPM_CONFIG_PREFIX: /cache/npm
      npm_config_cache_min: ${NPM_CACHE_MIN}
